import time

from telebot import TeleBot, types
from random import randint
from fnmatch import fnmatch
from sessions import Session, User
from serelize import KHTFile
import os

token = os.environ.get('TELEGRAM_TOKEN')
bot = TeleBot(token)
sessions = []


@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    create = types.KeyboardButton("/create_session")
    add_file_button = types.KeyboardButton('/set_file')
    join_button = types.KeyboardButton('/join_session')
    start_game_button = types.KeyboardButton('/start_game')

    markup.add(create, add_file_button, join_button, start_game_button)

    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç ‚úåÔ∏è", reply_markup=markup)


@bot.message_handler(commands=['function'])
def some_message(message):
    bot.send_message(message.chat.id, '–ö–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ...')


@bot.message_handler(commands=['create_session'])
def create_session(message):
    user_id = str(message.from_user.id)

    for session in sessions:
        if str(session.admin) == user_id:
            bot.send_message(message.chat.id, '–í–∞—à–∞ —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!')
            return

    session_id = f'{randint(100, 999)}-{randint(100, 999)}-{randint(100, 999)}'
    admin = User(
        message.from_user.id,
        'ADMIN',
        user_id
    )
    session = Session(session_id, admin)
    sessions.append(session)

    with open(r'text_messages/new_session_message.txt', 'r', encoding='utf8') as text:
        text_message = f'{text.read()} {session_id}'

    bot.send_message(message.chat.id, text_message)


@bot.message_handler(commands=['get_session_info'])
def session_info(message):
    user = User(
        message.from_user.id,
        'Admin',
        f'{message.from_user.last_name} {message.from_user.first_name}'
    )

    session_info_message = ''
    session = user.find_session(sessions)

    if session is None:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π!')
        return

    session_info_message += f'–ù–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏: {session.session_id}\n'
    session_info_message += f'–°–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤:\n'

    for gamers in session:
        session_info_message += f'{gamers}\n'

    bot.send_message(message.chat.id, session_info_message)


@bot.message_handler(commands=['join_session'], content_types=['text'])
def join_session(message):
    msg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏!')
    bot.register_next_step_handler(msg, input_session_id)


def input_session_id(message):
    resp = message.text
    user_id = str(message.from_user.id)

    if fnmatch(str(resp), '???-???-???'):
        for session in sessions:
            if session.session_id == str(resp):
                user = User(user_id, 'Gamer', user_id)
                if user in session.gamer_list:
                    bot.send_message(message.chat.id, '–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–µ—Å—Å–∏–∏!')
                    return

                session += user
                bot.send_message(message.chat.id, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!')
                return
        else:
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
            return
    else:
        bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å–µ—Å—Å–∏–∏!')
        return


@bot.message_handler(commands=['start_game'])
def start_game(message):
    admin = User(
        message.from_user.id,
        'Admin',
        f'{message.from_user.last_name} {message.from_user.first_name}'
    )

    session = admin.find_session(sessions)

    if session is None:
        bot.send_message(message.chat.id, '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏!')
        return

    for num, task in enumerate(session.kahoot_file):
        string_message = f'–í–æ–ø—Ä–æ—Å {num+1}/{len(session.kahoot_file)}.\n'
        string_message += f'{task.question}\n'

        for i, option in enumerate(task.options):
            string_message += f'    {i+1}. {option}\n'

        for gamer in session:

            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            buttons = [
                types.KeyboardButton(char) for char in 'üî∫‚ö´‚¨úüî∑'
            ]
            markup.add(*buttons)

            with open(r'10-seconds.gif', 'rb') as file:
                bot.send_animation(gamer.user_id, file)

            msg = bot.send_message(gamer.user_id, string_message, reply_markup=markup)
            bot.register_next_step_handler(msg, set_answer)

        time.sleep(10)


def set_answer(message):
    if message.text == 'üî∫':
        ...
    elif message.text == '‚ö´':
        ...
    elif message.text == '‚¨ú':
        ...
    elif message.text == 'üî∑':
        ...


@bot.message_handler(commands=['set_file'], content_types=['text', ])
def set_test_file(message):
    msg = bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .json –¥–ª—è –≤–∞—à–µ–π –∏–≥—Ä—ã.')
    bot.register_next_step_handler(msg, send_file)


def send_file(message):
    resp = message.document

    if 'json' not in str(resp.file_name).rsplit('.', maxsplit=1):
        bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞!')
        return

    admin = User(
        message.from_user.id,
        'Admin',
        f'{message.from_user.last_name} {message.from_user.first_name}'
    )

    session = admin.find_session(sessions)

    if session is None:
        bot.send_message(message.chat.id, '–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏!')
        return

    file = bot.get_file(resp.file_id)
    kahoot_file = bot.download_file(file.file_path).decode('utf8')
    session.kahoot_file = KHTFile(kahoot_file)

    bot.send_message(message.chat.id, '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!')
    bot.send_message(message.chat.id,
                     f'''–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: {session.kahoot_file.title}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(session.kahoot_file)}'''
                     )


bot.polling(none_stop=True)
